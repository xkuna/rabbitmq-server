# vim:sw=2:et:
# https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow
name: "Test - Erlang 22.3"
on:
  push:
  repository_dispatch:
    types:
      - new-commit-to-dep-release-branch
jobs:
  # vim:sw=2:et:
  checks:
    name: checks
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: CHECK RABBITMQ COMPONENTS
        # https://github.community/t5/GitHub-Actions/How-can-I-set-an-expression-as-an-environment-variable-at/m-p/41804/highlight/true#M4751
        id: ref
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          echo "::set-output name=branch_or_tag_name::$branch_or_tag_name"
          make check-rabbitmq-components.mk base_rmq_ref=master current_rmq_ref=$branch_or_tag_name
      - name: RESOLVE & COMPILE DEPS
        run: |
          make deps test-deps base_rmq_ref=master current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }}
          echo "Capture versions of the RabbitMQ components used in this workflow..."
          make rabbit-rabbitmq-deps.mk
          echo "Remove directories not used in the subsequent jobs..."
          rm -fr deps/*/{.git,test}
      - name: UPLOAD DEPS VERSIONS
        uses: actions/upload-artifact@v2
        with:
          name: rabbit-rabbitmq-deps.mk
          path: rabbit-rabbitmq-deps.mk
      - name: CREATE DEPS ARCHIVE
        run: |
          tar cf - deps | xz > deps.tar.xz
      - name: UPLOAD DEPS ARCHIVE
        uses: actions/upload-artifact@v2
        with:
          name: deps.tar.xz
          path: deps.tar.xz
      - name: CHECK CROSS REFERENCES
        run: |
          make xref base_rmq_ref=master current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }}
      - name: COMPILE FOR TEST
        run: |
          make test-build base_rmq_ref=master current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }}
      - name: CACHE SECONDARY UMBRELLAS
        if: success() && 'oldest' == 'oldest'
        uses: actions/cache@v1
        with:
          path: umbrellas
          key: secondary-umbrellas-v3.7.28-v3.8.8-erlang-22.3-rev4
      - name: PREPARE SECONDARY UMBRELLA COPIES
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          for version in v3.7.28 v3.8.8; do
            umbrella="umbrellas/$version"
            if ! test -d "$umbrella"  ||
               ! make -C "$umbrella/deps/rabbit" test-dist; then
              rm -rf "$umbrella"

              # Fetch the master Umbrella; the final umbrellas are created from
              # the master copy.
              if ! test -d umbrellas/master; then
                git config --global advice.detachedHead false
                git clone \
                  https://github.com/rabbitmq/rabbitmq-public-umbrella.git \
                  umbrellas/master
                make -C umbrellas/master co # To get RabbitMQ components.
              fi

              # We copy the master Umbrella and checkout the appropriate tag.
              cp -a umbrellas/master "$umbrella"
              git -C "$umbrella" checkout "master"
              make -C "$umbrella" up BRANCH="$version"
              # To remove third-party deps which were checked out when the
              # projects were on the `master` branch. Thus, possibly not the
              # version pinning we expect. We update the Umbrella one last time
              # to fetch the correct third-party deps.
              make -C "$umbrella" clean-3rd-party-repos
              make -C "$umbrella" up
              make -C "$umbrella/deps/rabbit" test-dist
              rm -rf "$umbrella"/deps/rabbitmq_website
              rm -rf "$umbrella"/deps/rabbitmq_prometheus/docker
              rm -rf "$umbrella"/deps/*/{.git,test} "$umbrella"/.git
            fi
          done
          rm -fr umbrellas/master
      - name: CREATE SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar cf - umbrellas | xz > secondary-umbrellas.tar.xz
      - name: UPLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/upload-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
          path: secondary-umbrellas.tar.xz
  # vim:sw=2:et:
  dialyzer:
    name: dialyzer
    needs: [checks]
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        if: success() && 'oldest' == 'latest'
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        if: success() && 'oldest' == 'latest'
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        if: success() && 'oldest' == 'latest'
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        if: success() && 'oldest' == 'latest'
        run: |
          tar Jxf deps.tar.xz
          rm deps.tar.xz
      - name: RUN DIALYZER
        if: success() && 'oldest' == 'latest'
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          make dialyze \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL=
  # vim:sw=2:et:
  eunit:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: eunit
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
          rm deps.tar.xz
      - name: RUN TESTS
        run: |
          ! test -d ebin || touch ebin/*
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          make eunit \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1
  # vim:sw=2:et:
  ct-amqqueue_backward_compatibility:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-amqqueue_backward_compatibility
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-amqqueue_backward_compatibility \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-amqqueue_backward_compatibility \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-amqqueue_backward_compatibility-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-backing_queue:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-backing_queue
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-backing_queue \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-backing_queue \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-backing_queue-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-channel_interceptor:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-channel_interceptor
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-channel_interceptor \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-channel_interceptor \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-channel_interceptor-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-channel_operation_timeout:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-channel_operation_timeout
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-channel_operation_timeout \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-channel_operation_timeout \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-channel_operation_timeout-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-cluster:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-cluster
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-cluster \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-cluster \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-cluster-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-cluster_rename:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-cluster_rename
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-cluster_rename \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-cluster_rename \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-cluster_rename-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-clustering_management:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-clustering_management
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-clustering_management \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-clustering_management \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-clustering_management-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-config_schema:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-config_schema
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-config_schema \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-config_schema \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-config_schema-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-confirms_rejects:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-confirms_rejects
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-confirms_rejects \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-confirms_rejects \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-confirms_rejects-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-consumer_timeout:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-consumer_timeout
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-consumer_timeout \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-consumer_timeout \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-consumer_timeout-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-crashing_queues:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-crashing_queues
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-crashing_queues \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-crashing_queues \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-crashing_queues-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-dead_lettering:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-dead_lettering
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-dead_lettering \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-dead_lettering \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-dead_lettering-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-definition_import:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-definition_import
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-definition_import \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-definition_import \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-definition_import-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-disconnect_detected_during_alarm:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-disconnect_detected_during_alarm
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-disconnect_detected_during_alarm \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-disconnect_detected_during_alarm \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-disconnect_detected_during_alarm-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-dynamic_ha:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-dynamic_ha
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-dynamic_ha \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-dynamic_ha \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-dynamic_ha-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-dynamic_qq:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-dynamic_qq
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-dynamic_qq \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-dynamic_qq \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-dynamic_qq-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-eager_sync:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-eager_sync
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-eager_sync \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-eager_sync \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-eager_sync-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-feature_flags:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-feature_flags
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-feature_flags \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-feature_flags \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-feature_flags-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-lazy_queue:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-lazy_queue
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-lazy_queue \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-lazy_queue \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-lazy_queue-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-list_consumers_sanity_check:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-list_consumers_sanity_check
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-list_consumers_sanity_check \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-list_consumers_sanity_check \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-list_consumers_sanity_check-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-list_queues_online_and_offline:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-list_queues_online_and_offline
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-list_queues_online_and_offline \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-list_queues_online_and_offline \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-list_queues_online_and_offline-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-maintenance_mode:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-maintenance_mode
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-maintenance_mode \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-maintenance_mode \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-maintenance_mode-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-many_node_ha:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-many_node_ha
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-many_node_ha \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-many_node_ha \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-many_node_ha-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-message_size_limit:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-message_size_limit
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-message_size_limit \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-message_size_limit \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-message_size_limit-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-metrics:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-metrics
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-metrics \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-metrics \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-metrics-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-mirrored_supervisor:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-mirrored_supervisor
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-mirrored_supervisor \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-mirrored_supervisor \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-mirrored_supervisor-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-msg_store:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-msg_store
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-msg_store \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-msg_store \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-msg_store-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-peer_discovery_classic_config:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-peer_discovery_classic_config
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-peer_discovery_classic_config \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-peer_discovery_classic_config \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-peer_discovery_classic_config-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-peer_discovery_dns:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-peer_discovery_dns
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-peer_discovery_dns \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-peer_discovery_dns \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-peer_discovery_dns-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-per_user_connection_channel_limit:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-per_user_connection_channel_limit
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-per_user_connection_channel_limit \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-per_user_connection_channel_limit \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-per_user_connection_channel_limit-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-per_user_connection_channel_limit_partitions:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-per_user_connection_channel_limit_partitions
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-per_user_connection_channel_limit_partitions \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-per_user_connection_channel_limit_partitions \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-per_user_connection_channel_limit_partitions-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-per_user_connection_channel_tracking:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-per_user_connection_channel_tracking
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-per_user_connection_channel_tracking \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-per_user_connection_channel_tracking \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-per_user_connection_channel_tracking-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-per_user_connection_tracking:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-per_user_connection_tracking
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-per_user_connection_tracking \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-per_user_connection_tracking \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-per_user_connection_tracking-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-per_vhost_connection_limit:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-per_vhost_connection_limit
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-per_vhost_connection_limit \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-per_vhost_connection_limit \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-per_vhost_connection_limit-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-per_vhost_connection_limit_partitions:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-per_vhost_connection_limit_partitions
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-per_vhost_connection_limit_partitions \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-per_vhost_connection_limit_partitions \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-per_vhost_connection_limit_partitions-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-per_vhost_msg_store:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-per_vhost_msg_store
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-per_vhost_msg_store \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-per_vhost_msg_store \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-per_vhost_msg_store-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-per_vhost_queue_limit:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-per_vhost_queue_limit
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-per_vhost_queue_limit \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-per_vhost_queue_limit \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-per_vhost_queue_limit-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-policy:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-policy
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-policy \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-policy \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-policy-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-priority_queue:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-priority_queue
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-priority_queue \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-priority_queue \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-priority_queue-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-priority_queue_recovery:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-priority_queue_recovery
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-priority_queue_recovery \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-priority_queue_recovery \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-priority_queue_recovery-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-product_info:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-product_info
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-product_info \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-product_info \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-product_info-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-proxy_protocol:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-proxy_protocol
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-proxy_protocol \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-proxy_protocol \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-proxy_protocol-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-publisher_confirms_parallel:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-publisher_confirms_parallel
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-publisher_confirms_parallel \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-publisher_confirms_parallel \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-publisher_confirms_parallel-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-queue_length_limits:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-queue_length_limits
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-queue_length_limits \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-queue_length_limits \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-queue_length_limits-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-queue_master_location:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-queue_master_location
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-queue_master_location \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-queue_master_location \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-queue_master_location-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-queue_parallel:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-queue_parallel
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-queue_parallel \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-queue_parallel \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-queue_parallel-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-quorum_queue:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-quorum_queue
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-quorum_queue \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-quorum_queue \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-quorum_queue-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-rabbit_core_metrics_gc:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-rabbit_core_metrics_gc
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-rabbit_core_metrics_gc \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-rabbit_core_metrics_gc \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-rabbit_core_metrics_gc-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-rabbit_fifo:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-rabbit_fifo
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-rabbit_fifo \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-rabbit_fifo \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-rabbit_fifo-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-rabbit_fifo_int:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-rabbit_fifo_int
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-rabbit_fifo_int \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-rabbit_fifo_int \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-rabbit_fifo_int-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-rabbit_fifo_prop:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-rabbit_fifo_prop
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-rabbit_fifo_prop \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-rabbit_fifo_prop \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-rabbit_fifo_prop-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-rabbitmq_queues_cli_integration:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-rabbitmq_queues_cli_integration
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-rabbitmq_queues_cli_integration \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-rabbitmq_queues_cli_integration \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-rabbitmq_queues_cli_integration-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-rabbitmqctl_integration:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-rabbitmqctl_integration
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-rabbitmqctl_integration \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-rabbitmqctl_integration \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-rabbitmqctl_integration-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-rabbitmqctl_shutdown:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-rabbitmqctl_shutdown
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-rabbitmqctl_shutdown \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-rabbitmqctl_shutdown \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-rabbitmqctl_shutdown-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-signal_handling:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-signal_handling
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-signal_handling \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-signal_handling \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-signal_handling-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-simple_ha:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-simple_ha
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-simple_ha \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-simple_ha \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-simple_ha-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-single_active_consumer:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-single_active_consumer
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-single_active_consumer \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-single_active_consumer \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-single_active_consumer-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-sup_delayed_restart:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-sup_delayed_restart
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-sup_delayed_restart \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-sup_delayed_restart \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-sup_delayed_restart-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-sync_detection:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-sync_detection
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-sync_detection \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-sync_detection \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-sync_detection-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-term_to_binary_compat_prop:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-term_to_binary_compat_prop
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-term_to_binary_compat_prop \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-term_to_binary_compat_prop \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-term_to_binary_compat_prop-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-topic_permission:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-topic_permission
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-topic_permission \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-topic_permission \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-topic_permission-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_access_control:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_access_control
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_access_control \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_access_control \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_access_control-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_access_control_authn_authz_context_propagation:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_access_control_authn_authz_context_propagation
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_access_control_authn_authz_context_propagation \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_access_control_authn_authz_context_propagation \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_access_control_authn_authz_context_propagation-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_access_control_credential_validation:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_access_control_credential_validation
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_access_control_credential_validation \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_access_control_credential_validation \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_access_control_credential_validation-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_amqp091_content_framing:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_amqp091_content_framing
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_amqp091_content_framing \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_amqp091_content_framing \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_amqp091_content_framing-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_amqp091_server_properties:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_amqp091_server_properties
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_amqp091_server_properties \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_amqp091_server_properties \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_amqp091_server_properties-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_app_management:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_app_management
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_app_management \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_app_management \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_app_management-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_cluster_formation_locking_mocks:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_cluster_formation_locking_mocks
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_cluster_formation_locking_mocks \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_cluster_formation_locking_mocks \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_cluster_formation_locking_mocks-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_collections:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_collections
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_collections \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_collections \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_collections-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_config_value_encryption:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_config_value_encryption
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_config_value_encryption \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_config_value_encryption \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_config_value_encryption-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_connection_tracking:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_connection_tracking
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_connection_tracking \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_connection_tracking \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_connection_tracking-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_credit_flow:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_credit_flow
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_credit_flow \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_credit_flow \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_credit_flow-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_disk_monitor:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_disk_monitor
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_disk_monitor \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_disk_monitor \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_disk_monitor-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_disk_monitor_mocks:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_disk_monitor_mocks
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_disk_monitor_mocks \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_disk_monitor_mocks \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_disk_monitor_mocks-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_file_handle_cache:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_file_handle_cache
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_file_handle_cache \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_file_handle_cache \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_file_handle_cache-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_gen_server2:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_gen_server2
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_gen_server2 \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_gen_server2 \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_gen_server2-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_gm:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_gm
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_gm \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_gm \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_gm-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_log_config:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_log_config
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_log_config \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_log_config \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_log_config-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_log_management:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_log_management
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_log_management \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_log_management \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_log_management-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_operator_policy:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_operator_policy
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_operator_policy \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_operator_policy \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_operator_policy-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_pg_local:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_pg_local
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_pg_local \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_pg_local \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_pg_local-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_plugin_directories:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_plugin_directories
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_plugin_directories \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_plugin_directories \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_plugin_directories-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_plugin_versioning:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_plugin_versioning
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_plugin_versioning \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_plugin_versioning \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_plugin_versioning-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_policy_validators:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_policy_validators
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_policy_validators \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_policy_validators \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_policy_validators-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_priority_queue:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_priority_queue
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_priority_queue \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_priority_queue \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_priority_queue-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_queue_consumers:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_queue_consumers
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_queue_consumers \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_queue_consumers \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_queue_consumers-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_stats_and_metrics:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_stats_and_metrics
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_stats_and_metrics \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_stats_and_metrics \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_stats_and_metrics-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_supervisor2:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_supervisor2
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_supervisor2 \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_supervisor2 \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_supervisor2-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-unit_vm_memory_monitor:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-unit_vm_memory_monitor
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-unit_vm_memory_monitor \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-unit_vm_memory_monitor \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-unit_vm_memory_monitor-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-upgrade_preparation:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-upgrade_preparation
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-upgrade_preparation \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-upgrade_preparation \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-upgrade_preparation-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  ct-vhost:
    needs: [checks]
    # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#contexts
    name: ct-vhost
    runs-on: ubuntu-18.04
    steps:
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2
      # https://github.com/marketplace/actions/setup-elixir
      - name: CONFIGURE OTP & ELIXIR
        uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3
          # https://github.com/elixir-lang/elixir/releases
          elixir-version: 1.10.3
      - name: DOWNLOAD DEPS ARCHIVE
        uses: actions/download-artifact@v2
        with:
          name: deps.tar.xz
      - name: UNPACK DEPS ARCHIVE
        run: |
          tar Jxf deps.tar.xz
      - name: RUN TESTS
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          ! test -d ebin || touch ebin/*
          export BASE_RMQ_REF=master
          export ERLANG_VERSION=22.3
          export ELIXIR_VERSION=1.10.3
          make ct-vhost \
            base_rmq_ref=master \
            current_rmq_ref=$branch_or_tag_name \
            FULL= \
            FAIL_FAST=1 \
            SKIP_AS_ERROR=1 \
            CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
      - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        uses: actions/download-artifact@v2
        with:
          name: secondary-umbrellas.tar.xz
      - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          tar Jxf secondary-umbrellas.tar.xz
          rm secondary-umbrellas.tar.xz
      - name: RUN TESTS [mixed-versions]
        if: success() && 'oldest' == 'oldest'
        run: |
          set -ex
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          for umbrella in umbrellas/*; do
            test -d "$umbrella"
            printf '\n\033[1;32mMixing clusters with RabbitMQ %s\033[0m' \
              $(basename "$umbrella")
            make distclean-ct ct-vhost \
              base_rmq_ref=master \
              current_rmq_ref=$branch_or_tag_name \
              FULL= \
              FAIL_FAST=1 \
              SKIP_AS_ERROR=1 \
              SECONDARY_UMBRELLA=$PWD/$umbrella \
              RABBITMQ_FEATURE_FLAGS= \
              CT_OPTS="-ct_hooks honeycomb_cth '[{directory,\"$PWD/honeycomb\"}]'"
          done
      - name: ON FAILURE ARCHIVE TESTS LOGS
        if: failure()
        run: |
          make ct-logs-archive
      - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
        # https://github.com/marketplace/actions/upload-artifact
        uses: actions/upload-artifact@v2-preview
        if: failure()
        with:
          name: ct-vhost-logs
          path: "*-ct-logs-*.tar.xz"
      - name: HONEYCOMB
        if: success() || failure()
        run: |
          echo "$(ls honeycomb | wc -l) events recorded"
          for f in honeycomb/*; do
            RC=$(curl --silent \
                -H 'X-Honeycomb-Team: ${{ secrets.HONEYCOMB_TEAM }}' \
                -d @${f} \
                -o /dev/null \
                -w "%{http_code}" \
                "https://api.honeycomb.io/1/events/rabbitmq-ci")
            if [ "$RC" != "200" ]; then
              echo "Honeycomb returned ${RC}"
              cat ${f}
              printf "\n\n"
            fi
          done
  # vim:sw=2:et:
  capture-tested-deps-versions:
    needs:
      - dialyzer
      - eunit
      - ct-amqqueue_backward_compatibility
      - ct-backing_queue
      - ct-channel_interceptor
      - ct-channel_operation_timeout
      - ct-cluster
      - ct-cluster_rename
      - ct-clustering_management
      - ct-config_schema
      - ct-confirms_rejects
      - ct-consumer_timeout
      - ct-crashing_queues
      - ct-dead_lettering
      - ct-definition_import
      - ct-disconnect_detected_during_alarm
      - ct-dynamic_ha
      - ct-dynamic_qq
      - ct-eager_sync
      - ct-feature_flags
      - ct-lazy_queue
      - ct-list_consumers_sanity_check
      - ct-list_queues_online_and_offline
      - ct-maintenance_mode
      - ct-many_node_ha
      - ct-message_size_limit
      - ct-metrics
      - ct-mirrored_supervisor
      - ct-msg_store
      - ct-peer_discovery_classic_config
      - ct-peer_discovery_dns
      - ct-per_user_connection_channel_limit
      - ct-per_user_connection_channel_limit_partitions
      - ct-per_user_connection_channel_tracking
      - ct-per_user_connection_tracking
      - ct-per_vhost_connection_limit
      - ct-per_vhost_connection_limit_partitions
      - ct-per_vhost_msg_store
      - ct-per_vhost_queue_limit
      - ct-policy
      - ct-priority_queue
      - ct-priority_queue_recovery
      - ct-product_info
      - ct-proxy_protocol
      - ct-publisher_confirms_parallel
      - ct-queue_length_limits
      - ct-queue_master_location
      - ct-queue_parallel
      - ct-quorum_queue
      - ct-rabbit_core_metrics_gc
      - ct-rabbit_fifo
      - ct-rabbit_fifo_int
      - ct-rabbit_fifo_prop
      - ct-rabbitmq_queues_cli_integration
      - ct-rabbitmqctl_integration
      - ct-rabbitmqctl_shutdown
      - ct-signal_handling
      - ct-simple_ha
      - ct-single_active_consumer
      - ct-sup_delayed_restart
      - ct-sync_detection
      - ct-term_to_binary_compat_prop
      - ct-topic_permission
      - ct-unit_access_control
      - ct-unit_access_control_authn_authz_context_propagation
      - ct-unit_access_control_credential_validation
      - ct-unit_amqp091_content_framing
      - ct-unit_amqp091_server_properties
      - ct-unit_app_management
      - ct-unit_cluster_formation_locking_mocks
      - ct-unit_collections
      - ct-unit_config_value_encryption
      - ct-unit_connection_tracking
      - ct-unit_credit_flow
      - ct-unit_disk_monitor
      - ct-unit_disk_monitor_mocks
      - ct-unit_file_handle_cache
      - ct-unit_gen_server2
      - ct-unit_gm
      - ct-unit_log_config
      - ct-unit_log_management
      - ct-unit_operator_policy
      - ct-unit_pg_local
      - ct-unit_plugin_directories
      - ct-unit_plugin_versioning
      - ct-unit_policy_validators
      - ct-unit_priority_queue
      - ct-unit_queue_consumers
      - ct-unit_stats_and_metrics
      - ct-unit_supervisor2
      - ct-unit_vm_memory_monitor
      - ct-upgrade_preparation
      - ct-vhost
    runs-on: ubuntu-18.04
    steps:
      - if: github.ref == 'refs/heads/master'
        uses: actions/download-artifact@v2
        with:
          name: rabbit-rabbitmq-deps.mk
      - name: FORMAT GIT REF
        if: github.ref == 'refs/heads/master'
        # https://github.community/t5/GitHub-Actions/How-can-I-set-an-expression-as-an-environment-variable-at/m-p/41804/highlight/true#M4751
        id: ref
        run: |
          branch_or_tag_name=${GITHUB_REF#refs/*/}
          echo "::set-output name=branch_or_tag_name::$branch_or_tag_name"
      - name: UPLOAD TO S3
        if: github.ref == 'refs/heads/master'
        # https://github.com/marketplace/actions/s3-file-upload
        uses: zdurham/s3-upload-github-action@master
        env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_REGION: ${{ secrets.AWS_REGION }}
         FILE: rabbit-rabbitmq-deps.mk
         S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
         S3_KEY: rabbitmq-server/${{ steps.ref.outputs.branch_or_tag_name }}/${{ github.run_id }}/otp-22.3/rabbit-rabbitmq-deps.mk
